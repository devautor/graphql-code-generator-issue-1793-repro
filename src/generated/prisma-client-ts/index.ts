// Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  addressCustomer: (where?: AddressCustomerWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  customerWishlist: (where?: CustomerWishlistWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productVariant: (where?: ProductVariantWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  addressCustomer: (
    where: AddressCustomerWhereUniqueInput
  ) => AddressCustomerNullablePromise;
  addressCustomers: (args?: {
    where?: AddressCustomerWhereInput;
    orderBy?: AddressCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AddressCustomer>;
  addressCustomersConnection: (args?: {
    where?: AddressCustomerWhereInput;
    orderBy?: AddressCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressCustomerConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  customerWishlist: (
    where: CustomerWishlistWhereUniqueInput
  ) => CustomerWishlistNullablePromise;
  customerWishlists: (args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CustomerWishlist>;
  customerWishlistsConnection: (args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerWishlistConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productVariant: (
    where: ProductVariantWhereUniqueInput
  ) => ProductVariantNullablePromise;
  productVariants: (args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductVariant>;
  productVariantsConnection: (args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductVariantConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddressCustomer: (
    data: AddressCustomerCreateInput
  ) => AddressCustomerPromise;
  updateAddressCustomer: (args: {
    data: AddressCustomerUpdateInput;
    where: AddressCustomerWhereUniqueInput;
  }) => AddressCustomerPromise;
  updateManyAddressCustomers: (args: {
    data: AddressCustomerUpdateManyMutationInput;
    where?: AddressCustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertAddressCustomer: (args: {
    where: AddressCustomerWhereUniqueInput;
    create: AddressCustomerCreateInput;
    update: AddressCustomerUpdateInput;
  }) => AddressCustomerPromise;
  deleteAddressCustomer: (
    where: AddressCustomerWhereUniqueInput
  ) => AddressCustomerPromise;
  deleteManyAddressCustomers: (
    where?: AddressCustomerWhereInput
  ) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createCustomerWishlist: (
    data: CustomerWishlistCreateInput
  ) => CustomerWishlistPromise;
  updateCustomerWishlist: (args: {
    data: CustomerWishlistUpdateInput;
    where: CustomerWishlistWhereUniqueInput;
  }) => CustomerWishlistPromise;
  updateManyCustomerWishlists: (args: {
    data: CustomerWishlistUpdateManyMutationInput;
    where?: CustomerWishlistWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomerWishlist: (args: {
    where: CustomerWishlistWhereUniqueInput;
    create: CustomerWishlistCreateInput;
    update: CustomerWishlistUpdateInput;
  }) => CustomerWishlistPromise;
  deleteCustomerWishlist: (
    where: CustomerWishlistWhereUniqueInput
  ) => CustomerWishlistPromise;
  deleteManyCustomerWishlists: (
    where?: CustomerWishlistWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductVariant: (
    data: ProductVariantCreateInput
  ) => ProductVariantPromise;
  updateProductVariant: (args: {
    data: ProductVariantUpdateInput;
    where: ProductVariantWhereUniqueInput;
  }) => ProductVariantPromise;
  updateManyProductVariants: (args: {
    data: ProductVariantUpdateManyMutationInput;
    where?: ProductVariantWhereInput;
  }) => BatchPayloadPromise;
  upsertProductVariant: (args: {
    where: ProductVariantWhereUniqueInput;
    create: ProductVariantCreateInput;
    update: ProductVariantUpdateInput;
  }) => ProductVariantPromise;
  deleteProductVariant: (
    where: ProductVariantWhereUniqueInput
  ) => ProductVariantPromise;
  deleteManyProductVariants: (
    where?: ProductVariantWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  addressCustomer: (
    where?: AddressCustomerSubscriptionWhereInput
  ) => AddressCustomerSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  customerWishlist: (
    where?: CustomerWishlistSubscriptionWhereInput
  ) => CustomerWishlistSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productVariant: (
    where?: ProductVariantSubscriptionWhereInput
  ) => ProductVariantSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UniversalIdType = "GTIN" | "UPC" | "EAN";

export type AddressType = "HOME" | "WORK" | "OTHER";

export type AddressCustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "building_ASC"
  | "building_DESC"
  | "locality_ASC"
  | "locality_DESC"
  | "city_ASC"
  | "city_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "state_ASC"
  | "state_DESC"
  | "landmark_ASC"
  | "landmark_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "recipientName_ASC"
  | "recipientName_DESC"
  | "recipientMobile_ASC"
  | "recipientMobile_DESC"
  | "recipientAlternateMobile_ASC"
  | "recipientAlternateMobile_DESC"
  | "addressType_ASC"
  | "addressType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomerWishlistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "listName_ASC"
  | "listName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductVariantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "universalIdType_ASC"
  | "universalIdType_DESC"
  | "universalId_ASC"
  | "universalId_DESC"
  | "skuId_ASC"
  | "skuId_DESC"
  | "inStock_ASC"
  | "inStock_DESC"
  | "listPrice_ASC"
  | "listPrice_DESC"
  | "salePrice_ASC"
  | "salePrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Gender = "MALE" | "FEMALE" | "OTHER";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "emailId_ASC"
  | "emailId_DESC"
  | "mobileNumber_ASC"
  | "mobileNumber_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "brand_ASC"
  | "brand_DESC"
  | "manufacturer_ASC"
  | "manufacturer_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProductUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export type AddressCustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductCreateWithoutVariantsInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  name: String;
  description: String;
  brand: String;
  manufacturer?: Maybe<String>;
  tags?: Maybe<ProductCreatetagsInput>;
  tax: Float;
}

export interface CustomerWishlistUpdateInput {
  customer?: Maybe<CustomerUpdateOneRequiredWithoutWishlistsInput>;
  listName?: Maybe<String>;
  productVariants?: Maybe<ProductVariantUpdateManyWithoutWishlistedInInput>;
}

export interface ProductCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface CustomerWishlistUpsertWithWhereUniqueWithoutCustomerInput {
  where: CustomerWishlistWhereUniqueInput;
  update: CustomerWishlistUpdateWithoutCustomerDataInput;
  create: CustomerWishlistCreateWithoutCustomerInput;
}

export interface AddressCustomerUpdateInput {
  customerAddress?: Maybe<CustomerUpdateOneWithoutAddressesInput>;
  building?: Maybe<String>;
  locality?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<String>;
  state?: Maybe<String>;
  landmark?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  recipientName?: Maybe<String>;
  recipientMobile?: Maybe<String>;
  recipientAlternateMobile?: Maybe<String>;
  addressType?: Maybe<AddressType>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  brand?: Maybe<String>;
  brand_not?: Maybe<String>;
  brand_in?: Maybe<String[] | String>;
  brand_not_in?: Maybe<String[] | String>;
  brand_lt?: Maybe<String>;
  brand_lte?: Maybe<String>;
  brand_gt?: Maybe<String>;
  brand_gte?: Maybe<String>;
  brand_contains?: Maybe<String>;
  brand_not_contains?: Maybe<String>;
  brand_starts_with?: Maybe<String>;
  brand_not_starts_with?: Maybe<String>;
  brand_ends_with?: Maybe<String>;
  brand_not_ends_with?: Maybe<String>;
  manufacturer?: Maybe<String>;
  manufacturer_not?: Maybe<String>;
  manufacturer_in?: Maybe<String[] | String>;
  manufacturer_not_in?: Maybe<String[] | String>;
  manufacturer_lt?: Maybe<String>;
  manufacturer_lte?: Maybe<String>;
  manufacturer_gt?: Maybe<String>;
  manufacturer_gte?: Maybe<String>;
  manufacturer_contains?: Maybe<String>;
  manufacturer_not_contains?: Maybe<String>;
  manufacturer_starts_with?: Maybe<String>;
  manufacturer_not_starts_with?: Maybe<String>;
  manufacturer_ends_with?: Maybe<String>;
  manufacturer_not_ends_with?: Maybe<String>;
  tax?: Maybe<Float>;
  tax_not?: Maybe<Float>;
  tax_in?: Maybe<Float[] | Float>;
  tax_not_in?: Maybe<Float[] | Float>;
  tax_lt?: Maybe<Float>;
  tax_lte?: Maybe<Float>;
  tax_gt?: Maybe<Float>;
  tax_gte?: Maybe<Float>;
  variants_every?: Maybe<ProductVariantWhereInput>;
  variants_some?: Maybe<ProductVariantWhereInput>;
  variants_none?: Maybe<ProductVariantWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface CustomerUpdateOneWithoutAddressesInput {
  create?: Maybe<CustomerCreateWithoutAddressesInput>;
  update?: Maybe<CustomerUpdateWithoutAddressesDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutAddressesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface ProductVariantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  product?: Maybe<ProductWhereInput>;
  universalIdType?: Maybe<UniversalIdType>;
  universalIdType_not?: Maybe<UniversalIdType>;
  universalIdType_in?: Maybe<UniversalIdType[] | UniversalIdType>;
  universalIdType_not_in?: Maybe<UniversalIdType[] | UniversalIdType>;
  universalId?: Maybe<String>;
  universalId_not?: Maybe<String>;
  universalId_in?: Maybe<String[] | String>;
  universalId_not_in?: Maybe<String[] | String>;
  universalId_lt?: Maybe<String>;
  universalId_lte?: Maybe<String>;
  universalId_gt?: Maybe<String>;
  universalId_gte?: Maybe<String>;
  universalId_contains?: Maybe<String>;
  universalId_not_contains?: Maybe<String>;
  universalId_starts_with?: Maybe<String>;
  universalId_not_starts_with?: Maybe<String>;
  universalId_ends_with?: Maybe<String>;
  universalId_not_ends_with?: Maybe<String>;
  skuId?: Maybe<String>;
  skuId_not?: Maybe<String>;
  skuId_in?: Maybe<String[] | String>;
  skuId_not_in?: Maybe<String[] | String>;
  skuId_lt?: Maybe<String>;
  skuId_lte?: Maybe<String>;
  skuId_gt?: Maybe<String>;
  skuId_gte?: Maybe<String>;
  skuId_contains?: Maybe<String>;
  skuId_not_contains?: Maybe<String>;
  skuId_starts_with?: Maybe<String>;
  skuId_not_starts_with?: Maybe<String>;
  skuId_ends_with?: Maybe<String>;
  skuId_not_ends_with?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  inStock_not?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  listPrice_not?: Maybe<Int>;
  listPrice_in?: Maybe<Int[] | Int>;
  listPrice_not_in?: Maybe<Int[] | Int>;
  listPrice_lt?: Maybe<Int>;
  listPrice_lte?: Maybe<Int>;
  listPrice_gt?: Maybe<Int>;
  listPrice_gte?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  salePrice_not?: Maybe<Int>;
  salePrice_in?: Maybe<Int[] | Int>;
  salePrice_not_in?: Maybe<Int[] | Int>;
  salePrice_lt?: Maybe<Int>;
  salePrice_lte?: Maybe<Int>;
  salePrice_gt?: Maybe<Int>;
  salePrice_gte?: Maybe<Int>;
  wishlistedIn_every?: Maybe<CustomerWishlistWhereInput>;
  wishlistedIn_some?: Maybe<CustomerWishlistWhereInput>;
  wishlistedIn_none?: Maybe<CustomerWishlistWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductVariantWhereInput[] | ProductVariantWhereInput>;
  OR?: Maybe<ProductVariantWhereInput[] | ProductVariantWhereInput>;
  NOT?: Maybe<ProductVariantWhereInput[] | ProductVariantWhereInput>;
}

export interface CustomerUpdateWithoutAddressesDataInput {
  emailId?: Maybe<String>;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
  wishlists?: Maybe<CustomerWishlistUpdateManyWithoutCustomerInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  emailId?: Maybe<String>;
  emailId_not?: Maybe<String>;
  emailId_in?: Maybe<String[] | String>;
  emailId_not_in?: Maybe<String[] | String>;
  emailId_lt?: Maybe<String>;
  emailId_lte?: Maybe<String>;
  emailId_gt?: Maybe<String>;
  emailId_gte?: Maybe<String>;
  emailId_contains?: Maybe<String>;
  emailId_not_contains?: Maybe<String>;
  emailId_starts_with?: Maybe<String>;
  emailId_not_starts_with?: Maybe<String>;
  emailId_ends_with?: Maybe<String>;
  emailId_not_ends_with?: Maybe<String>;
  mobileNumber?: Maybe<String>;
  mobileNumber_not?: Maybe<String>;
  mobileNumber_in?: Maybe<String[] | String>;
  mobileNumber_not_in?: Maybe<String[] | String>;
  mobileNumber_lt?: Maybe<String>;
  mobileNumber_lte?: Maybe<String>;
  mobileNumber_gt?: Maybe<String>;
  mobileNumber_gte?: Maybe<String>;
  mobileNumber_contains?: Maybe<String>;
  mobileNumber_not_contains?: Maybe<String>;
  mobileNumber_starts_with?: Maybe<String>;
  mobileNumber_not_starts_with?: Maybe<String>;
  mobileNumber_ends_with?: Maybe<String>;
  mobileNumber_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  addresses_every?: Maybe<AddressCustomerWhereInput>;
  addresses_some?: Maybe<AddressCustomerWhereInput>;
  addresses_none?: Maybe<AddressCustomerWhereInput>;
  wishlists_every?: Maybe<CustomerWishlistWhereInput>;
  wishlists_some?: Maybe<CustomerWishlistWhereInput>;
  wishlists_none?: Maybe<CustomerWishlistWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface CustomerWishlistUpdateManyWithoutCustomerInput {
  create?: Maybe<
    | CustomerWishlistCreateWithoutCustomerInput[]
    | CustomerWishlistCreateWithoutCustomerInput
  >;
  delete?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  connect?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  set?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  disconnect?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  update?: Maybe<
    | CustomerWishlistUpdateWithWhereUniqueWithoutCustomerInput[]
    | CustomerWishlistUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | CustomerWishlistUpsertWithWhereUniqueWithoutCustomerInput[]
    | CustomerWishlistUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<
    CustomerWishlistScalarWhereInput[] | CustomerWishlistScalarWhereInput
  >;
  updateMany?: Maybe<
    | CustomerWishlistUpdateManyWithWhereNestedInput[]
    | CustomerWishlistUpdateManyWithWhereNestedInput
  >;
}

export interface AddressCustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  customerAddress?: Maybe<CustomerWhereInput>;
  building?: Maybe<String>;
  building_not?: Maybe<String>;
  building_in?: Maybe<String[] | String>;
  building_not_in?: Maybe<String[] | String>;
  building_lt?: Maybe<String>;
  building_lte?: Maybe<String>;
  building_gt?: Maybe<String>;
  building_gte?: Maybe<String>;
  building_contains?: Maybe<String>;
  building_not_contains?: Maybe<String>;
  building_starts_with?: Maybe<String>;
  building_not_starts_with?: Maybe<String>;
  building_ends_with?: Maybe<String>;
  building_not_ends_with?: Maybe<String>;
  locality?: Maybe<String>;
  locality_not?: Maybe<String>;
  locality_in?: Maybe<String[] | String>;
  locality_not_in?: Maybe<String[] | String>;
  locality_lt?: Maybe<String>;
  locality_lte?: Maybe<String>;
  locality_gt?: Maybe<String>;
  locality_gte?: Maybe<String>;
  locality_contains?: Maybe<String>;
  locality_not_contains?: Maybe<String>;
  locality_starts_with?: Maybe<String>;
  locality_not_starts_with?: Maybe<String>;
  locality_ends_with?: Maybe<String>;
  locality_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  landmark?: Maybe<String>;
  landmark_not?: Maybe<String>;
  landmark_in?: Maybe<String[] | String>;
  landmark_not_in?: Maybe<String[] | String>;
  landmark_lt?: Maybe<String>;
  landmark_lte?: Maybe<String>;
  landmark_gt?: Maybe<String>;
  landmark_gte?: Maybe<String>;
  landmark_contains?: Maybe<String>;
  landmark_not_contains?: Maybe<String>;
  landmark_starts_with?: Maybe<String>;
  landmark_not_starts_with?: Maybe<String>;
  landmark_ends_with?: Maybe<String>;
  landmark_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  recipientName?: Maybe<String>;
  recipientName_not?: Maybe<String>;
  recipientName_in?: Maybe<String[] | String>;
  recipientName_not_in?: Maybe<String[] | String>;
  recipientName_lt?: Maybe<String>;
  recipientName_lte?: Maybe<String>;
  recipientName_gt?: Maybe<String>;
  recipientName_gte?: Maybe<String>;
  recipientName_contains?: Maybe<String>;
  recipientName_not_contains?: Maybe<String>;
  recipientName_starts_with?: Maybe<String>;
  recipientName_not_starts_with?: Maybe<String>;
  recipientName_ends_with?: Maybe<String>;
  recipientName_not_ends_with?: Maybe<String>;
  recipientMobile?: Maybe<String>;
  recipientMobile_not?: Maybe<String>;
  recipientMobile_in?: Maybe<String[] | String>;
  recipientMobile_not_in?: Maybe<String[] | String>;
  recipientMobile_lt?: Maybe<String>;
  recipientMobile_lte?: Maybe<String>;
  recipientMobile_gt?: Maybe<String>;
  recipientMobile_gte?: Maybe<String>;
  recipientMobile_contains?: Maybe<String>;
  recipientMobile_not_contains?: Maybe<String>;
  recipientMobile_starts_with?: Maybe<String>;
  recipientMobile_not_starts_with?: Maybe<String>;
  recipientMobile_ends_with?: Maybe<String>;
  recipientMobile_not_ends_with?: Maybe<String>;
  recipientAlternateMobile?: Maybe<String>;
  recipientAlternateMobile_not?: Maybe<String>;
  recipientAlternateMobile_in?: Maybe<String[] | String>;
  recipientAlternateMobile_not_in?: Maybe<String[] | String>;
  recipientAlternateMobile_lt?: Maybe<String>;
  recipientAlternateMobile_lte?: Maybe<String>;
  recipientAlternateMobile_gt?: Maybe<String>;
  recipientAlternateMobile_gte?: Maybe<String>;
  recipientAlternateMobile_contains?: Maybe<String>;
  recipientAlternateMobile_not_contains?: Maybe<String>;
  recipientAlternateMobile_starts_with?: Maybe<String>;
  recipientAlternateMobile_not_starts_with?: Maybe<String>;
  recipientAlternateMobile_ends_with?: Maybe<String>;
  recipientAlternateMobile_not_ends_with?: Maybe<String>;
  addressType?: Maybe<AddressType>;
  addressType_not?: Maybe<AddressType>;
  addressType_in?: Maybe<AddressType[] | AddressType>;
  addressType_not_in?: Maybe<AddressType[] | AddressType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AddressCustomerWhereInput[] | AddressCustomerWhereInput>;
  OR?: Maybe<AddressCustomerWhereInput[] | AddressCustomerWhereInput>;
  NOT?: Maybe<AddressCustomerWhereInput[] | AddressCustomerWhereInput>;
}

export interface CustomerWishlistUpdateWithWhereUniqueWithoutCustomerInput {
  where: CustomerWishlistWhereUniqueInput;
  data: CustomerWishlistUpdateWithoutCustomerDataInput;
}

export interface AddressCustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressCustomerWhereInput>;
  AND?: Maybe<
    | AddressCustomerSubscriptionWhereInput[]
    | AddressCustomerSubscriptionWhereInput
  >;
  OR?: Maybe<
    | AddressCustomerSubscriptionWhereInput[]
    | AddressCustomerSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | AddressCustomerSubscriptionWhereInput[]
    | AddressCustomerSubscriptionWhereInput
  >;
}

export interface CustomerWishlistUpdateWithoutCustomerDataInput {
  listName?: Maybe<String>;
  productVariants?: Maybe<ProductVariantUpdateManyWithoutWishlistedInInput>;
}

export interface ProductVariantUpdateInput {
  product?: Maybe<ProductUpdateOneRequiredWithoutVariantsInput>;
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  wishlistedIn?: Maybe<CustomerWishlistUpdateManyWithoutProductVariantsInput>;
}

export interface ProductVariantUpdateManyWithoutWishlistedInInput {
  create?: Maybe<
    | ProductVariantCreateWithoutWishlistedInInput[]
    | ProductVariantCreateWithoutWishlistedInInput
  >;
  delete?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  connect?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  set?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  update?: Maybe<
    | ProductVariantUpdateWithWhereUniqueWithoutWishlistedInInput[]
    | ProductVariantUpdateWithWhereUniqueWithoutWishlistedInInput
  >;
  upsert?: Maybe<
    | ProductVariantUpsertWithWhereUniqueWithoutWishlistedInInput[]
    | ProductVariantUpsertWithWhereUniqueWithoutWishlistedInInput
  >;
  deleteMany?: Maybe<
    ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductVariantUpdateManyWithWhereNestedInput[]
    | ProductVariantUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateManyMutationInput {
  isPublished?: Maybe<Boolean>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  brand?: Maybe<String>;
  manufacturer?: Maybe<String>;
  tags?: Maybe<ProductUpdatetagsInput>;
  tax?: Maybe<Float>;
}

export interface ProductVariantUpdateWithWhereUniqueWithoutWishlistedInInput {
  where: ProductVariantWhereUniqueInput;
  data: ProductVariantUpdateWithoutWishlistedInDataInput;
}

export interface ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput;
  update: ProductVariantUpdateWithoutProductDataInput;
  create: ProductVariantCreateWithoutProductInput;
}

export interface ProductVariantUpdateWithoutWishlistedInDataInput {
  product?: Maybe<ProductUpdateOneRequiredWithoutVariantsInput>;
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
}

export interface CustomerWishlistUpdateWithoutProductVariantsDataInput {
  customer?: Maybe<CustomerUpdateOneRequiredWithoutWishlistsInput>;
  listName?: Maybe<String>;
}

export interface ProductUpdateOneRequiredWithoutVariantsInput {
  create?: Maybe<ProductCreateWithoutVariantsInput>;
  update?: Maybe<ProductUpdateWithoutVariantsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutVariantsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export type CustomerWishlistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductUpdateWithoutVariantsDataInput {
  isPublished?: Maybe<Boolean>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  brand?: Maybe<String>;
  manufacturer?: Maybe<String>;
  tags?: Maybe<ProductUpdatetagsInput>;
  tax?: Maybe<Float>;
}

export interface ProductVariantUpdateWithoutProductDataInput {
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  wishlistedIn?: Maybe<CustomerWishlistUpdateManyWithoutProductVariantsInput>;
}

export interface CustomerWishlistUpdateManyMutationInput {
  listName?: Maybe<String>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput;
  create: ProductCreateWithoutVariantsInput;
}

export interface ProductUpdateInput {
  isPublished?: Maybe<Boolean>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  brand?: Maybe<String>;
  manufacturer?: Maybe<String>;
  tags?: Maybe<ProductUpdatetagsInput>;
  tax?: Maybe<Float>;
  variants?: Maybe<ProductVariantUpdateManyWithoutProductInput>;
}

export interface ProductVariantUpsertWithWhereUniqueWithoutWishlistedInInput {
  where: ProductVariantWhereUniqueInput;
  update: ProductVariantUpdateWithoutWishlistedInDataInput;
  create: ProductVariantCreateWithoutWishlistedInInput;
}

export interface CustomerWishlistCreateManyWithoutProductVariantsInput {
  create?: Maybe<
    | CustomerWishlistCreateWithoutProductVariantsInput[]
    | CustomerWishlistCreateWithoutProductVariantsInput
  >;
  connect?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
}

export interface ProductVariantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  universalIdType?: Maybe<UniversalIdType>;
  universalIdType_not?: Maybe<UniversalIdType>;
  universalIdType_in?: Maybe<UniversalIdType[] | UniversalIdType>;
  universalIdType_not_in?: Maybe<UniversalIdType[] | UniversalIdType>;
  universalId?: Maybe<String>;
  universalId_not?: Maybe<String>;
  universalId_in?: Maybe<String[] | String>;
  universalId_not_in?: Maybe<String[] | String>;
  universalId_lt?: Maybe<String>;
  universalId_lte?: Maybe<String>;
  universalId_gt?: Maybe<String>;
  universalId_gte?: Maybe<String>;
  universalId_contains?: Maybe<String>;
  universalId_not_contains?: Maybe<String>;
  universalId_starts_with?: Maybe<String>;
  universalId_not_starts_with?: Maybe<String>;
  universalId_ends_with?: Maybe<String>;
  universalId_not_ends_with?: Maybe<String>;
  skuId?: Maybe<String>;
  skuId_not?: Maybe<String>;
  skuId_in?: Maybe<String[] | String>;
  skuId_not_in?: Maybe<String[] | String>;
  skuId_lt?: Maybe<String>;
  skuId_lte?: Maybe<String>;
  skuId_gt?: Maybe<String>;
  skuId_gte?: Maybe<String>;
  skuId_contains?: Maybe<String>;
  skuId_not_contains?: Maybe<String>;
  skuId_starts_with?: Maybe<String>;
  skuId_not_starts_with?: Maybe<String>;
  skuId_ends_with?: Maybe<String>;
  skuId_not_ends_with?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  inStock_not?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  listPrice_not?: Maybe<Int>;
  listPrice_in?: Maybe<Int[] | Int>;
  listPrice_not_in?: Maybe<Int[] | Int>;
  listPrice_lt?: Maybe<Int>;
  listPrice_lte?: Maybe<Int>;
  listPrice_gt?: Maybe<Int>;
  listPrice_gte?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  salePrice_not?: Maybe<Int>;
  salePrice_in?: Maybe<Int[] | Int>;
  salePrice_not_in?: Maybe<Int[] | Int>;
  salePrice_lt?: Maybe<Int>;
  salePrice_lte?: Maybe<Int>;
  salePrice_gt?: Maybe<Int>;
  salePrice_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput
  >;
  OR?: Maybe<ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput>;
  NOT?: Maybe<
    ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput
  >;
}

export interface ProductVariantCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId: String;
  inStock?: Maybe<Boolean>;
  listPrice: Int;
  salePrice: Int;
  wishlistedIn?: Maybe<CustomerWishlistCreateManyWithoutProductVariantsInput>;
}

export interface ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput;
  data: ProductVariantUpdateManyDataInput;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  name: String;
  description: String;
  brand: String;
  manufacturer?: Maybe<String>;
  tags?: Maybe<ProductCreatetagsInput>;
  tax: Float;
  variants?: Maybe<ProductVariantCreateManyWithoutProductInput>;
}

export interface ProductVariantUpdateManyDataInput {
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
}

export interface AddressCustomerCreateInput {
  id?: Maybe<ID_Input>;
  customerAddress?: Maybe<CustomerCreateOneWithoutAddressesInput>;
  building: String;
  locality: String;
  city: String;
  postalCode: String;
  state: String;
  landmark?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  recipientName: String;
  recipientMobile: String;
  recipientAlternateMobile?: Maybe<String>;
  addressType: AddressType;
}

export interface CustomerUpsertWithoutWishlistsInput {
  update: CustomerUpdateWithoutWishlistsDataInput;
  create: CustomerCreateWithoutWishlistsInput;
}

export interface CustomerCreateWithoutAddressesInput {
  id?: Maybe<ID_Input>;
  emailId: String;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
  wishlists?: Maybe<CustomerWishlistCreateManyWithoutCustomerInput>;
}

export interface CustomerWishlistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  listName?: Maybe<String>;
  listName_not?: Maybe<String>;
  listName_in?: Maybe<String[] | String>;
  listName_not_in?: Maybe<String[] | String>;
  listName_lt?: Maybe<String>;
  listName_lte?: Maybe<String>;
  listName_gt?: Maybe<String>;
  listName_gte?: Maybe<String>;
  listName_contains?: Maybe<String>;
  listName_not_contains?: Maybe<String>;
  listName_starts_with?: Maybe<String>;
  listName_not_starts_with?: Maybe<String>;
  listName_ends_with?: Maybe<String>;
  listName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    CustomerWishlistScalarWhereInput[] | CustomerWishlistScalarWhereInput
  >;
  OR?: Maybe<
    CustomerWishlistScalarWhereInput[] | CustomerWishlistScalarWhereInput
  >;
  NOT?: Maybe<
    CustomerWishlistScalarWhereInput[] | CustomerWishlistScalarWhereInput
  >;
}

export interface CustomerWishlistCreateWithoutCustomerInput {
  id?: Maybe<ID_Input>;
  listName: String;
  productVariants?: Maybe<ProductVariantCreateManyWithoutWishlistedInInput>;
}

export interface CustomerWishlistUpdateManyWithWhereNestedInput {
  where: CustomerWishlistScalarWhereInput;
  data: CustomerWishlistUpdateManyDataInput;
}

export interface ProductVariantCreateWithoutWishlistedInInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneWithoutVariantsInput;
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId: String;
  inStock?: Maybe<Boolean>;
  listPrice: Int;
  salePrice: Int;
}

export interface CustomerWishlistUpdateManyDataInput {
  listName?: Maybe<String>;
}

export interface ProductVariantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductVariantWhereInput>;
  AND?: Maybe<
    | ProductVariantSubscriptionWhereInput[]
    | ProductVariantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProductVariantSubscriptionWhereInput[]
    | ProductVariantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProductVariantSubscriptionWhereInput[]
    | ProductVariantSubscriptionWhereInput
  >;
}

export interface CustomerUpsertWithoutAddressesInput {
  update: CustomerUpdateWithoutAddressesDataInput;
  create: CustomerCreateWithoutAddressesInput;
}

export interface CustomerWishlistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  customer?: Maybe<CustomerWhereInput>;
  listName?: Maybe<String>;
  listName_not?: Maybe<String>;
  listName_in?: Maybe<String[] | String>;
  listName_not_in?: Maybe<String[] | String>;
  listName_lt?: Maybe<String>;
  listName_lte?: Maybe<String>;
  listName_gt?: Maybe<String>;
  listName_gte?: Maybe<String>;
  listName_contains?: Maybe<String>;
  listName_not_contains?: Maybe<String>;
  listName_starts_with?: Maybe<String>;
  listName_not_starts_with?: Maybe<String>;
  listName_ends_with?: Maybe<String>;
  listName_not_ends_with?: Maybe<String>;
  productVariants_every?: Maybe<ProductVariantWhereInput>;
  productVariants_some?: Maybe<ProductVariantWhereInput>;
  productVariants_none?: Maybe<ProductVariantWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerWishlistWhereInput[] | CustomerWishlistWhereInput>;
  OR?: Maybe<CustomerWishlistWhereInput[] | CustomerWishlistWhereInput>;
  NOT?: Maybe<CustomerWishlistWhereInput[] | CustomerWishlistWhereInput>;
}

export interface AddressCustomerUpdateManyMutationInput {
  building?: Maybe<String>;
  locality?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<String>;
  state?: Maybe<String>;
  landmark?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  recipientName?: Maybe<String>;
  recipientMobile?: Maybe<String>;
  recipientAlternateMobile?: Maybe<String>;
  addressType?: Maybe<AddressType>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface CustomerUpdateWithoutWishlistsDataInput {
  emailId?: Maybe<String>;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
  addresses?: Maybe<AddressCustomerUpdateManyWithoutCustomerAddressInput>;
}

export interface ProductVariantCreateInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneWithoutVariantsInput;
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId: String;
  inStock?: Maybe<Boolean>;
  listPrice: Int;
  salePrice: Int;
  wishlistedIn?: Maybe<CustomerWishlistCreateManyWithoutProductVariantsInput>;
}

export interface CustomerUpdateOneRequiredWithoutWishlistsInput {
  create?: Maybe<CustomerCreateWithoutWishlistsInput>;
  update?: Maybe<CustomerUpdateWithoutWishlistsDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutWishlistsInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerWishlistUpsertWithWhereUniqueWithoutProductVariantsInput {
  where: CustomerWishlistWhereUniqueInput;
  update: CustomerWishlistUpdateWithoutProductVariantsDataInput;
  create: CustomerWishlistCreateWithoutProductVariantsInput;
}

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  emailId: String;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
  addresses?: Maybe<AddressCustomerCreateManyWithoutCustomerAddressInput>;
  wishlists?: Maybe<CustomerWishlistCreateManyWithoutCustomerInput>;
}

export interface CustomerWishlistUpdateManyWithoutProductVariantsInput {
  create?: Maybe<
    | CustomerWishlistCreateWithoutProductVariantsInput[]
    | CustomerWishlistCreateWithoutProductVariantsInput
  >;
  delete?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  connect?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  set?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  disconnect?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
  update?: Maybe<
    | CustomerWishlistUpdateWithWhereUniqueWithoutProductVariantsInput[]
    | CustomerWishlistUpdateWithWhereUniqueWithoutProductVariantsInput
  >;
  upsert?: Maybe<
    | CustomerWishlistUpsertWithWhereUniqueWithoutProductVariantsInput[]
    | CustomerWishlistUpsertWithWhereUniqueWithoutProductVariantsInput
  >;
  deleteMany?: Maybe<
    CustomerWishlistScalarWhereInput[] | CustomerWishlistScalarWhereInput
  >;
  updateMany?: Maybe<
    | CustomerWishlistUpdateManyWithWhereNestedInput[]
    | CustomerWishlistUpdateManyWithWhereNestedInput
  >;
}

export interface AddressCustomerCreateManyWithoutCustomerAddressInput {
  create?: Maybe<
    | AddressCustomerCreateWithoutCustomerAddressInput[]
    | AddressCustomerCreateWithoutCustomerAddressInput
  >;
  connect?: Maybe<
    AddressCustomerWhereUniqueInput[] | AddressCustomerWhereUniqueInput
  >;
}

export interface ProductVariantUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductVariantCreateWithoutProductInput[]
    | ProductVariantCreateWithoutProductInput
  >;
  delete?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  connect?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  set?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
  update?: Maybe<
    | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    | ProductVariantUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    | ProductVariantUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductVariantUpdateManyWithWhereNestedInput[]
    | ProductVariantUpdateManyWithWhereNestedInput
  >;
}

export interface AddressCustomerCreateWithoutCustomerAddressInput {
  id?: Maybe<ID_Input>;
  building: String;
  locality: String;
  city: String;
  postalCode: String;
  state: String;
  landmark?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  recipientName: String;
  recipientMobile: String;
  recipientAlternateMobile?: Maybe<String>;
  addressType: AddressType;
}

export type ProductVariantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CustomerUpdateInput {
  emailId?: Maybe<String>;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
  addresses?: Maybe<AddressCustomerUpdateManyWithoutCustomerAddressInput>;
  wishlists?: Maybe<CustomerWishlistUpdateManyWithoutCustomerInput>;
}

export interface CustomerWishlistCreateManyWithoutCustomerInput {
  create?: Maybe<
    | CustomerWishlistCreateWithoutCustomerInput[]
    | CustomerWishlistCreateWithoutCustomerInput
  >;
  connect?: Maybe<
    CustomerWishlistWhereUniqueInput[] | CustomerWishlistWhereUniqueInput
  >;
}

export interface AddressCustomerUpdateManyWithoutCustomerAddressInput {
  create?: Maybe<
    | AddressCustomerCreateWithoutCustomerAddressInput[]
    | AddressCustomerCreateWithoutCustomerAddressInput
  >;
  delete?: Maybe<
    AddressCustomerWhereUniqueInput[] | AddressCustomerWhereUniqueInput
  >;
  connect?: Maybe<
    AddressCustomerWhereUniqueInput[] | AddressCustomerWhereUniqueInput
  >;
  set?: Maybe<
    AddressCustomerWhereUniqueInput[] | AddressCustomerWhereUniqueInput
  >;
  disconnect?: Maybe<
    AddressCustomerWhereUniqueInput[] | AddressCustomerWhereUniqueInput
  >;
  update?: Maybe<
    | AddressCustomerUpdateWithWhereUniqueWithoutCustomerAddressInput[]
    | AddressCustomerUpdateWithWhereUniqueWithoutCustomerAddressInput
  >;
  upsert?: Maybe<
    | AddressCustomerUpsertWithWhereUniqueWithoutCustomerAddressInput[]
    | AddressCustomerUpsertWithWhereUniqueWithoutCustomerAddressInput
  >;
  deleteMany?: Maybe<
    AddressCustomerScalarWhereInput[] | AddressCustomerScalarWhereInput
  >;
  updateMany?: Maybe<
    | AddressCustomerUpdateManyWithWhereNestedInput[]
    | AddressCustomerUpdateManyWithWhereNestedInput
  >;
}

export interface ProductCreateOneWithoutVariantsInput {
  create?: Maybe<ProductCreateWithoutVariantsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface AddressCustomerUpdateWithWhereUniqueWithoutCustomerAddressInput {
  where: AddressCustomerWhereUniqueInput;
  data: AddressCustomerUpdateWithoutCustomerAddressDataInput;
}

export interface CustomerWishlistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWishlistWhereInput>;
  AND?: Maybe<
    | CustomerWishlistSubscriptionWhereInput[]
    | CustomerWishlistSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CustomerWishlistSubscriptionWhereInput[]
    | CustomerWishlistSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CustomerWishlistSubscriptionWhereInput[]
    | CustomerWishlistSubscriptionWhereInput
  >;
}

export interface AddressCustomerUpdateWithoutCustomerAddressDataInput {
  building?: Maybe<String>;
  locality?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<String>;
  state?: Maybe<String>;
  landmark?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  recipientName?: Maybe<String>;
  recipientMobile?: Maybe<String>;
  recipientAlternateMobile?: Maybe<String>;
  addressType?: Maybe<AddressType>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  emailId?: Maybe<String>;
}>;

export interface AddressCustomerUpsertWithWhereUniqueWithoutCustomerAddressInput {
  where: AddressCustomerWhereUniqueInput;
  update: AddressCustomerUpdateWithoutCustomerAddressDataInput;
  create: AddressCustomerCreateWithoutCustomerAddressInput;
}

export interface ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput;
  data: ProductVariantUpdateWithoutProductDataInput;
}

export interface AddressCustomerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  building?: Maybe<String>;
  building_not?: Maybe<String>;
  building_in?: Maybe<String[] | String>;
  building_not_in?: Maybe<String[] | String>;
  building_lt?: Maybe<String>;
  building_lte?: Maybe<String>;
  building_gt?: Maybe<String>;
  building_gte?: Maybe<String>;
  building_contains?: Maybe<String>;
  building_not_contains?: Maybe<String>;
  building_starts_with?: Maybe<String>;
  building_not_starts_with?: Maybe<String>;
  building_ends_with?: Maybe<String>;
  building_not_ends_with?: Maybe<String>;
  locality?: Maybe<String>;
  locality_not?: Maybe<String>;
  locality_in?: Maybe<String[] | String>;
  locality_not_in?: Maybe<String[] | String>;
  locality_lt?: Maybe<String>;
  locality_lte?: Maybe<String>;
  locality_gt?: Maybe<String>;
  locality_gte?: Maybe<String>;
  locality_contains?: Maybe<String>;
  locality_not_contains?: Maybe<String>;
  locality_starts_with?: Maybe<String>;
  locality_not_starts_with?: Maybe<String>;
  locality_ends_with?: Maybe<String>;
  locality_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  landmark?: Maybe<String>;
  landmark_not?: Maybe<String>;
  landmark_in?: Maybe<String[] | String>;
  landmark_not_in?: Maybe<String[] | String>;
  landmark_lt?: Maybe<String>;
  landmark_lte?: Maybe<String>;
  landmark_gt?: Maybe<String>;
  landmark_gte?: Maybe<String>;
  landmark_contains?: Maybe<String>;
  landmark_not_contains?: Maybe<String>;
  landmark_starts_with?: Maybe<String>;
  landmark_not_starts_with?: Maybe<String>;
  landmark_ends_with?: Maybe<String>;
  landmark_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  recipientName?: Maybe<String>;
  recipientName_not?: Maybe<String>;
  recipientName_in?: Maybe<String[] | String>;
  recipientName_not_in?: Maybe<String[] | String>;
  recipientName_lt?: Maybe<String>;
  recipientName_lte?: Maybe<String>;
  recipientName_gt?: Maybe<String>;
  recipientName_gte?: Maybe<String>;
  recipientName_contains?: Maybe<String>;
  recipientName_not_contains?: Maybe<String>;
  recipientName_starts_with?: Maybe<String>;
  recipientName_not_starts_with?: Maybe<String>;
  recipientName_ends_with?: Maybe<String>;
  recipientName_not_ends_with?: Maybe<String>;
  recipientMobile?: Maybe<String>;
  recipientMobile_not?: Maybe<String>;
  recipientMobile_in?: Maybe<String[] | String>;
  recipientMobile_not_in?: Maybe<String[] | String>;
  recipientMobile_lt?: Maybe<String>;
  recipientMobile_lte?: Maybe<String>;
  recipientMobile_gt?: Maybe<String>;
  recipientMobile_gte?: Maybe<String>;
  recipientMobile_contains?: Maybe<String>;
  recipientMobile_not_contains?: Maybe<String>;
  recipientMobile_starts_with?: Maybe<String>;
  recipientMobile_not_starts_with?: Maybe<String>;
  recipientMobile_ends_with?: Maybe<String>;
  recipientMobile_not_ends_with?: Maybe<String>;
  recipientAlternateMobile?: Maybe<String>;
  recipientAlternateMobile_not?: Maybe<String>;
  recipientAlternateMobile_in?: Maybe<String[] | String>;
  recipientAlternateMobile_not_in?: Maybe<String[] | String>;
  recipientAlternateMobile_lt?: Maybe<String>;
  recipientAlternateMobile_lte?: Maybe<String>;
  recipientAlternateMobile_gt?: Maybe<String>;
  recipientAlternateMobile_gte?: Maybe<String>;
  recipientAlternateMobile_contains?: Maybe<String>;
  recipientAlternateMobile_not_contains?: Maybe<String>;
  recipientAlternateMobile_starts_with?: Maybe<String>;
  recipientAlternateMobile_not_starts_with?: Maybe<String>;
  recipientAlternateMobile_ends_with?: Maybe<String>;
  recipientAlternateMobile_not_ends_with?: Maybe<String>;
  addressType?: Maybe<AddressType>;
  addressType_not?: Maybe<AddressType>;
  addressType_in?: Maybe<AddressType[] | AddressType>;
  addressType_not_in?: Maybe<AddressType[] | AddressType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    AddressCustomerScalarWhereInput[] | AddressCustomerScalarWhereInput
  >;
  OR?: Maybe<
    AddressCustomerScalarWhereInput[] | AddressCustomerScalarWhereInput
  >;
  NOT?: Maybe<
    AddressCustomerScalarWhereInput[] | AddressCustomerScalarWhereInput
  >;
}

export interface ProductVariantCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductVariantCreateWithoutProductInput[]
    | ProductVariantCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
}

export interface AddressCustomerUpdateManyWithWhereNestedInput {
  where: AddressCustomerScalarWhereInput;
  data: AddressCustomerUpdateManyDataInput;
}

export interface ProductVariantCreateManyWithoutWishlistedInInput {
  create?: Maybe<
    | ProductVariantCreateWithoutWishlistedInInput[]
    | ProductVariantCreateWithoutWishlistedInInput
  >;
  connect?: Maybe<
    ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput
  >;
}

export interface AddressCustomerUpdateManyDataInput {
  building?: Maybe<String>;
  locality?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<String>;
  state?: Maybe<String>;
  landmark?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  recipientName?: Maybe<String>;
  recipientMobile?: Maybe<String>;
  recipientAlternateMobile?: Maybe<String>;
  addressType?: Maybe<AddressType>;
}

export interface ProductVariantUpdateManyMutationInput {
  universalIdType?: Maybe<UniversalIdType>;
  universalId?: Maybe<String>;
  skuId?: Maybe<String>;
  inStock?: Maybe<Boolean>;
  listPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
}

export interface CustomerCreateWithoutWishlistsInput {
  id?: Maybe<ID_Input>;
  emailId: String;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
  addresses?: Maybe<AddressCustomerCreateManyWithoutCustomerAddressInput>;
}

export interface CustomerCreateOneWithoutWishlistsInput {
  create?: Maybe<CustomerCreateWithoutWishlistsInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerWishlistCreateInput {
  id?: Maybe<ID_Input>;
  customer: CustomerCreateOneWithoutWishlistsInput;
  listName: String;
  productVariants?: Maybe<ProductVariantCreateManyWithoutWishlistedInInput>;
}

export interface CustomerUpdateManyMutationInput {
  emailId?: Maybe<String>;
  mobileNumber?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<Gender>;
}

export interface CustomerWishlistUpdateWithWhereUniqueWithoutProductVariantsInput {
  where: CustomerWishlistWhereUniqueInput;
  data: CustomerWishlistUpdateWithoutProductVariantsDataInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface CustomerCreateOneWithoutAddressesInput {
  create?: Maybe<CustomerCreateWithoutAddressesInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerWishlistCreateWithoutProductVariantsInput {
  id?: Maybe<ID_Input>;
  customer: CustomerCreateOneWithoutWishlistsInput;
  listName: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ProductVariantPreviousValues {
  id: ID_Output;
  universalIdType?: UniversalIdType;
  universalId?: String;
  skuId: String;
  inStock: Boolean;
  listPrice: Int;
  salePrice: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductVariantPreviousValuesPromise
  extends Promise<ProductVariantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  universalIdType: () => Promise<UniversalIdType>;
  universalId: () => Promise<String>;
  skuId: () => Promise<String>;
  inStock: () => Promise<Boolean>;
  listPrice: () => Promise<Int>;
  salePrice: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductVariantPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductVariantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  universalIdType: () => Promise<AsyncIterator<UniversalIdType>>;
  universalId: () => Promise<AsyncIterator<String>>;
  skuId: () => Promise<AsyncIterator<String>>;
  inStock: () => Promise<AsyncIterator<Boolean>>;
  listPrice: () => Promise<AsyncIterator<Int>>;
  salePrice: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface CustomerWishlistPreviousValues {
  id: ID_Output;
  listName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerWishlistPreviousValuesPromise
  extends Promise<CustomerWishlistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  listName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerWishlistPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerWishlistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  listName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface AddressCustomerEdge {
  node: AddressCustomer;
  cursor: String;
}

export interface AddressCustomerEdgePromise
  extends Promise<AddressCustomerEdge>,
    Fragmentable {
  node: <T = AddressCustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressCustomerEdgeSubscription
  extends Promise<AsyncIterator<AddressCustomerEdge>>,
    Fragmentable {
  node: <T = AddressCustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddressCustomer {
  count: Int;
}

export interface AggregateAddressCustomerPromise
  extends Promise<AggregateAddressCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressCustomerSubscription
  extends Promise<AsyncIterator<AggregateAddressCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  isPublished: Boolean;
  name: String;
  description: String;
  brand: String;
  manufacturer?: String;
  tags: String[];
  tax: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  brand: () => Promise<String>;
  manufacturer: () => Promise<String>;
  tags: () => Promise<String[]>;
  tax: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  brand: () => Promise<AsyncIterator<String>>;
  manufacturer: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  tax: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProductVariantEdge {
  node: ProductVariant;
  cursor: String;
}

export interface ProductVariantEdgePromise
  extends Promise<ProductVariantEdge>,
    Fragmentable {
  node: <T = ProductVariantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductVariantEdgeSubscription
  extends Promise<AsyncIterator<ProductVariantEdge>>,
    Fragmentable {
  node: <T = ProductVariantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressCustomerConnection {
  pageInfo: PageInfo;
  edges: AddressCustomerEdge[];
}

export interface AddressCustomerConnectionPromise
  extends Promise<AddressCustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressCustomerEdge>>() => T;
  aggregate: <T = AggregateAddressCustomerPromise>() => T;
}

export interface AddressCustomerConnectionSubscription
  extends Promise<AsyncIterator<AddressCustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressCustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressCustomerSubscription>() => T;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface Product {
  id: ID_Output;
  isPublished: Boolean;
  name: String;
  description: String;
  brand: String;
  manufacturer?: String;
  tags: String[];
  tax: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  brand: () => Promise<String>;
  manufacturer: () => Promise<String>;
  tags: () => Promise<String[]>;
  tax: () => Promise<Float>;
  variants: <T = FragmentableArray<ProductVariant>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  brand: () => Promise<AsyncIterator<String>>;
  manufacturer: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  tax: () => Promise<AsyncIterator<Float>>;
  variants: <T = Promise<AsyncIterator<ProductVariantSubscription>>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  brand: () => Promise<String>;
  manufacturer: () => Promise<String>;
  tags: () => Promise<String[]>;
  tax: () => Promise<Float>;
  variants: <T = FragmentableArray<ProductVariant>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateCustomerWishlist {
  count: Int;
}

export interface AggregateCustomerWishlistPromise
  extends Promise<AggregateCustomerWishlist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerWishlistSubscription
  extends Promise<AsyncIterator<AggregateCustomerWishlist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressCustomer {
  id: ID_Output;
  building: String;
  locality: String;
  city: String;
  postalCode: String;
  state: String;
  landmark?: String;
  latitude?: Float;
  longitude?: Float;
  recipientName: String;
  recipientMobile: String;
  recipientAlternateMobile?: String;
  addressType: AddressType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AddressCustomerPromise
  extends Promise<AddressCustomer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customerAddress: <T = CustomerPromise>() => T;
  building: () => Promise<String>;
  locality: () => Promise<String>;
  city: () => Promise<String>;
  postalCode: () => Promise<String>;
  state: () => Promise<String>;
  landmark: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  recipientName: () => Promise<String>;
  recipientMobile: () => Promise<String>;
  recipientAlternateMobile: () => Promise<String>;
  addressType: () => Promise<AddressType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AddressCustomerSubscription
  extends Promise<AsyncIterator<AddressCustomer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customerAddress: <T = CustomerSubscription>() => T;
  building: () => Promise<AsyncIterator<String>>;
  locality: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  landmark: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  recipientName: () => Promise<AsyncIterator<String>>;
  recipientMobile: () => Promise<AsyncIterator<String>>;
  recipientAlternateMobile: () => Promise<AsyncIterator<String>>;
  addressType: () => Promise<AsyncIterator<AddressType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AddressCustomerNullablePromise
  extends Promise<AddressCustomer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customerAddress: <T = CustomerPromise>() => T;
  building: () => Promise<String>;
  locality: () => Promise<String>;
  city: () => Promise<String>;
  postalCode: () => Promise<String>;
  state: () => Promise<String>;
  landmark: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  recipientName: () => Promise<String>;
  recipientMobile: () => Promise<String>;
  recipientAlternateMobile: () => Promise<String>;
  addressType: () => Promise<AddressType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerWishlistConnection {
  pageInfo: PageInfo;
  edges: CustomerWishlistEdge[];
}

export interface CustomerWishlistConnectionPromise
  extends Promise<CustomerWishlistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerWishlistEdge>>() => T;
  aggregate: <T = AggregateCustomerWishlistPromise>() => T;
}

export interface CustomerWishlistConnectionSubscription
  extends Promise<AsyncIterator<CustomerWishlistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerWishlistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerWishlistSubscription>() => T;
}

export interface AddressCustomerSubscriptionPayload {
  mutation: MutationType;
  node: AddressCustomer;
  updatedFields: String[];
  previousValues: AddressCustomerPreviousValues;
}

export interface AddressCustomerSubscriptionPayloadPromise
  extends Promise<AddressCustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressCustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressCustomerPreviousValuesPromise>() => T;
}

export interface AddressCustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressCustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressCustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressCustomerPreviousValuesSubscription>() => T;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressCustomerPreviousValues {
  id: ID_Output;
  building: String;
  locality: String;
  city: String;
  postalCode: String;
  state: String;
  landmark?: String;
  latitude?: Float;
  longitude?: Float;
  recipientName: String;
  recipientMobile: String;
  recipientAlternateMobile?: String;
  addressType: AddressType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AddressCustomerPreviousValuesPromise
  extends Promise<AddressCustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  building: () => Promise<String>;
  locality: () => Promise<String>;
  city: () => Promise<String>;
  postalCode: () => Promise<String>;
  state: () => Promise<String>;
  landmark: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  recipientName: () => Promise<String>;
  recipientMobile: () => Promise<String>;
  recipientAlternateMobile: () => Promise<String>;
  addressType: () => Promise<AddressType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AddressCustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressCustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  building: () => Promise<AsyncIterator<String>>;
  locality: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  landmark: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  recipientName: () => Promise<AsyncIterator<String>>;
  recipientMobile: () => Promise<AsyncIterator<String>>;
  recipientAlternateMobile: () => Promise<AsyncIterator<String>>;
  addressType: () => Promise<AsyncIterator<AddressType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateProductVariant {
  count: Int;
}

export interface AggregateProductVariantPromise
  extends Promise<AggregateProductVariant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductVariantSubscription
  extends Promise<AsyncIterator<AggregateProductVariant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductVariant {
  id: ID_Output;
  universalIdType?: UniversalIdType;
  universalId?: String;
  skuId: String;
  inStock: Boolean;
  listPrice: Int;
  salePrice: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductVariantPromise
  extends Promise<ProductVariant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  universalIdType: () => Promise<UniversalIdType>;
  universalId: () => Promise<String>;
  skuId: () => Promise<String>;
  inStock: () => Promise<Boolean>;
  listPrice: () => Promise<Int>;
  salePrice: () => Promise<Int>;
  wishlistedIn: <T = FragmentableArray<CustomerWishlist>>(args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductVariantSubscription
  extends Promise<AsyncIterator<ProductVariant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = ProductSubscription>() => T;
  universalIdType: () => Promise<AsyncIterator<UniversalIdType>>;
  universalId: () => Promise<AsyncIterator<String>>;
  skuId: () => Promise<AsyncIterator<String>>;
  inStock: () => Promise<AsyncIterator<Boolean>>;
  listPrice: () => Promise<AsyncIterator<Int>>;
  salePrice: () => Promise<AsyncIterator<Int>>;
  wishlistedIn: <
    T = Promise<AsyncIterator<CustomerWishlistSubscription>>
  >(args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductVariantNullablePromise
  extends Promise<ProductVariant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  universalIdType: () => Promise<UniversalIdType>;
  universalId: () => Promise<String>;
  skuId: () => Promise<String>;
  inStock: () => Promise<Boolean>;
  listPrice: () => Promise<Int>;
  salePrice: () => Promise<Int>;
  wishlistedIn: <T = FragmentableArray<CustomerWishlist>>(args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerWishlistEdge {
  node: CustomerWishlist;
  cursor: String;
}

export interface CustomerWishlistEdgePromise
  extends Promise<CustomerWishlistEdge>,
    Fragmentable {
  node: <T = CustomerWishlistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerWishlistEdgeSubscription
  extends Promise<AsyncIterator<CustomerWishlistEdge>>,
    Fragmentable {
  node: <T = CustomerWishlistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerWishlistSubscriptionPayload {
  mutation: MutationType;
  node: CustomerWishlist;
  updatedFields: String[];
  previousValues: CustomerWishlistPreviousValues;
}

export interface CustomerWishlistSubscriptionPayloadPromise
  extends Promise<CustomerWishlistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerWishlistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerWishlistPreviousValuesPromise>() => T;
}

export interface CustomerWishlistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerWishlistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerWishlistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerWishlistPreviousValuesSubscription>() => T;
}

export interface CustomerWishlist {
  id: ID_Output;
  listName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerWishlistPromise
  extends Promise<CustomerWishlist>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customer: <T = CustomerPromise>() => T;
  listName: () => Promise<String>;
  productVariants: <T = FragmentableArray<ProductVariant>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerWishlistSubscription
  extends Promise<AsyncIterator<CustomerWishlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customer: <T = CustomerSubscription>() => T;
  listName: () => Promise<AsyncIterator<String>>;
  productVariants: <
    T = Promise<AsyncIterator<ProductVariantSubscription>>
  >(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerWishlistNullablePromise
  extends Promise<CustomerWishlist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customer: <T = CustomerPromise>() => T;
  listName: () => Promise<String>;
  productVariants: <T = FragmentableArray<ProductVariant>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  emailId: String;
  mobileNumber?: String;
  name?: String;
  gender?: Gender;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  emailId: () => Promise<String>;
  mobileNumber: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<Gender>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  emailId: () => Promise<AsyncIterator<String>>;
  mobileNumber: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Customer {
  id: ID_Output;
  emailId: String;
  mobileNumber?: String;
  name?: String;
  gender?: Gender;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  emailId: () => Promise<String>;
  mobileNumber: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<Gender>;
  addresses: <T = FragmentableArray<AddressCustomer>>(args?: {
    where?: AddressCustomerWhereInput;
    orderBy?: AddressCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wishlists: <T = FragmentableArray<CustomerWishlist>>(args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  emailId: () => Promise<AsyncIterator<String>>;
  mobileNumber: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  addresses: <T = Promise<AsyncIterator<AddressCustomerSubscription>>>(args?: {
    where?: AddressCustomerWhereInput;
    orderBy?: AddressCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wishlists: <T = Promise<AsyncIterator<CustomerWishlistSubscription>>>(args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  emailId: () => Promise<String>;
  mobileNumber: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<Gender>;
  addresses: <T = FragmentableArray<AddressCustomer>>(args?: {
    where?: AddressCustomerWhereInput;
    orderBy?: AddressCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wishlists: <T = FragmentableArray<CustomerWishlist>>(args?: {
    where?: CustomerWishlistWhereInput;
    orderBy?: CustomerWishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductVariantConnection {
  pageInfo: PageInfo;
  edges: ProductVariantEdge[];
}

export interface ProductVariantConnectionPromise
  extends Promise<ProductVariantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductVariantEdge>>() => T;
  aggregate: <T = AggregateProductVariantPromise>() => T;
}

export interface ProductVariantConnectionSubscription
  extends Promise<AsyncIterator<ProductVariantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductVariantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductVariantSubscription>() => T;
}

export interface ProductVariantSubscriptionPayload {
  mutation: MutationType;
  node: ProductVariant;
  updatedFields: String[];
  previousValues: ProductVariantPreviousValues;
}

export interface ProductVariantSubscriptionPayloadPromise
  extends Promise<ProductVariantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductVariantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductVariantPreviousValuesPromise>() => T;
}

export interface ProductVariantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductVariantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductVariantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductVariantPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "CustomerWishlist",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductVariant",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "UniversalIdType",
    embedded: false
  },
  {
    name: "AddressCustomer",
    embedded: false
  },
  {
    name: "AddressType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/kumar-gaurav/graphql-code-generator-issue/dev`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
